Google Checkout module for Rails
Hi,

I wrote this code like 2 years ago when started using rails. Since than many things changed and I registered on github to clean up this library and learn new things like git and plugin generators. So I am going to rewrite this bunch of code and make a nice plugin because code is awful right now (altough it works).

This is simple but working library for accepting Google Checkout Orders.<br>
It can be easily integrated with any Rails application and what is even
more important - can be easily improved to support features that I dont
need at this moment. This code is a part of another project. I couldnt
find completed solution when writing this so I decided to put the
results online.

Details: 
- sends digitally signed shopping carts (source code is cut to support USD only but it is easy to fix)
- autocharging orders
- saving and processing transactions via system of hooks
- shipping is NOT supported as my main project just sells music online. So "shippped" status is set automatically once the order is charged

INSTALL

- copy files to corresponding places in your RAILS_ROOT- migrations - to db/migrate, *.rb files to lib
run <b>rake db:migrate</b> or manually run migration. It will create 2 tables: one for transactions, another one - for order statuses
Ensure <b>'net/https'</b> library is also installed
<b>hmac-sha</b> library is required to digitally sign your shopping carts. On FreeBSD you can find it here: <i>/usr/ports/security/ruby-hmac</i>
Put <b>require lib/googlecheckout.rb</b> in the end of your config/environment.rb or whatever you use to include modules

Put <b>include  CanAcceptGoogleCheckout</b> to your sort of payment
controller. You need to define 3 constants (G_LIVE, G_MERCHANTID,
G_MERCHANTKEY) like it is made in sample. Remember to keep key in
secret. Now it should look like this: 

   require "#{RAILS_ROOT}/lib/can_accept_google_checkout.rb"
   
   class PaymentController < ApplicationController
   
     G+AF8-MERCHANTID = "PUT+AF8-YOUR+AF8-ID+AF8-HERE"
     G+AF8-MERCHANTKEY = "PUT+AF8-YOUR+AF8-KEY+AF8-HERE"
     G+AF8-LIVE = true
     include CanAcceptGoogleCheckout


Go to <a href="https://google.com/checkout/sell/settings?section=Integration">https://google.com/checkout/sell/settings?section=Integration</a>
and enter API callback URL: it will be smth like
"https://yourserver.com/YOURPAYMENTCONTROLLERHERE/g+AF8-checkout+AF8-callback",

set "Callback method" to HTML and you can also set extra security flag
to only post digitally signed XML shopping carts. This page also shows your Google Checkout Merchant Key in case you forgot
- now put all your business logic into <b>g+AF8-charge+AF8-amount+AF8-notification</b> method of your controller that is responsible for accepting online orders. See example.

def g+AF8-charge+AF8-amount+AF8-notification(opts)
    
    tr = GcheckoutTransaction.find+AF8-by+AF8-order+AF8-number(opts["google-order-number"], :include =+ACY-gt; :user)
    if tr +ACY-amp;+ACY-amp; tr.user
      options = +AHs- :value =+ACY-gt; opts['total-charge-amount'],
        :method=+ACY-gt;"gcheckout",
        :data =+ACY-gt; tr[:order+AF8-number]
      +AH0-
      
      begin
        tr.user.credit+AF8-money(options) if tr.credited+AF8-at.nil? or tr.credited+AF8-at.to+AF8-i.zero?
        tr.update+AF8-attribute(:credited+AF8-at, Time.now)
      rescue
      end
      deliver(opts["google-order-number"]) +ACM- this will autoset "shipped" status
    end
  end
Restart your webserver
Check <i>g+AF8-server2server</i> and <i>status</i> method samples in payment controller

You should also think about proper way to display transaction status
for users that are returning from google's page. It is NOT as fast as
paypal and you can not assume order is already charged when user clicks
"return". We on payplay.fm made a dynamic page with ajax progress bar
that shows transaction status: reviewing, charging, charged. See method
action in sample payment controller called <i>status</i>.

Author
http://workingwithrails.com/person/6232-evgeniy-kelyarsky
